import numpy as np
import json 
import matplotlib.pyplot as plt
from spatialmath.timing import result


class robot_arm:
    L = json.load(open(r"C:\Users\alexa\Downloads\micRoBot\lengths.json"))
    
    def __init__(self, xlim = [-300, 300], ylim = [-300, 300], zlim = [0, 500]):
        self.limits = [xlim, ylim, zlim]
    
    def forward_kinematics(self, q):
        """
        Args:
            q (_type_): angles of the joints
        """
        
        """ROBOT:


    E->  O------||   <-- D 
                  O  <-- C             
                 / 
                /
        B-->   O__   
               \  \ 
                ====  <- A
                |__| 
        """        
        self.q = q
        # c(q1)*self.L['lower_arm']['l'] - c(q1+q2)*self.L['upper_arm']['l'] + c(q1+q2+q3)*self.L['wrist']['l']
        a = self.find_joint3(q)
        #print(a*180/np.pi, b*180/np.pi)
        
        
        self.T0 = self._Rz(q[0]) @ self._T( 0, 0, self.L['world']['l']) 
        self.pA = self.T0[:3,3]
        
        self.T1 = self._T(self.L['base']['l'],0,0) @ self._Ry(q[1])
        Tb = self.T0@self.T1
        self.pB = Tb[:3,3]

        Ts1 = self.T0 @ self._T(self.L['base']['l'],0,0)  @ self._Ry(q[2])@self._T (0, 0, self.L['parallel_arm']['s1'])
        self.pS1 = Ts1[:3, 3]
        
        self.T2 =  self._T (0, 0, self.L['lower_arm']['l']) @ self._Ry(a) 
        Tc = Tb@self.T2
        self.pC = Tc[:3,3]
        
        Ts2 = Tb@self._T (0, 0, self.L['lower_arm']['l']) @ self._Ry(a) @ self._T (0, 0, -self.L['parallel_arm']['s2']) 
        self.pS2 = Ts2[:3, 3]
               

        self.T3 = self._T(-self.L['elbow']['l'], 0, 0) @ self._Rz(q[3])
        Td = Tc@self.T3
        self.pD = Td[:3,3]
        
        
                                
        self.T4 = self._T(0, 0, self.L['upper_arm']['l']) @ self._Ry(q[4])
        self.T5 = self._Rz(q[5]) @ self._T(0,0, self.L['wrist']['l'])
        self.T = Td @ self.T4 @ self.T5
        self.pE = self.T[:3,3]

        return self.T
    
    def find_joint3(self, q):
        theta_1 = q[1] - q[2]
        l1 = self.L['lower_arm']['l']
        d1 = self.L['parallel_arm']['s1']
        l2 = self.L['parallel_arm']['l']
        d2 = self.L['parallel_arm']['s2']
        
        """         o
             d2  .' :  
              .'    :
            o       :
            .       :L2
            .       : 
            . L1    :
            .       o
            .     . 
            .   . d1
            . . 
            o
        """
        x = (d1**2 + l1**2 - 2*d1*l1*np.cos(theta_1))**0.5 # Cosine rule
        phi_2 = np.arccos((d2**2 + x**2 - l2**2)/(2*d2*x)) # Cosine rule
        phi_1 = np.arcsin(np.sin(theta_1)*d1/x) # Sine rule
        
        return phi_1+phi_2
        
    def plot_robot(self):
        ax = plt.figure().add_subplot(projection='3d')

        ax.plot([0,self.pA[0], self.pB[0], self.pC[0], self.pD[0], self.pE[0]], [0, self.pA[1], self.pB[1], self.pC[1], self.pD[1], self.pE[1]], [0,self.pA[2], self.pB[2], self.pC[2], self.pD[2], self.pE[2]], 'b') 
        ax.plot([self.pB[0], self.pS1[0], self.pS2[0], self.pC[0]], [self.pB[1], self.pS1[1], self.pS2[1], self.pC[1]], [self.pB[2], self.pS1[2], self.pS2[2], self.pC[2]], 'ro-')
        
        dS = self.pS1-self.pS2
        
        for i, c in enumerate(['r', 'b', 'g']) : 
            ax.quiver(self.pE[0], self.pE[1], self.pE[2], self.T[0,i], self.T[1,i], self.T[2,i] , length=20, color=c)
        
        ax.set_xlim(self.limits[0])
        ax.set_ylim(self.limits[1])
        ax.set_zlim(self.limits[2])
        plt.show()
                
    def _Rx(self, theta):
        return np.array([[1, 0, 0, 0], [0, np.cos(theta), -np.sin(theta), 0], [0, np.sin(theta), np.cos(theta), 0], [0,0,0,1]])
    def _Ry(self, theta):
        return np.array([[np.cos(theta), 0, np.sin(theta), 0], [0, 1, 0, 0], [-np.sin(theta), 0, np.cos(theta), 0], [0,0,0,1]])
    def _Rz(self, theta):
        return np.array([[np.cos(theta), -np.sin(theta), 0, 0], [np.sin(theta), np.cos(theta), 0, 0], [0, 0, 1, 0], [0,0,0,1]])
    def _T(self, x, y, z):
        return np.array([[1, 0, 0, x], [0, 1, 0, y], [0, 0, 1, z], [0,0,0,1]])

if __name__ == '__main__':
    robot = robot_arm()
    T_dumb = robot.forward_kinematics(np.array([0,20,-90,0,0,0])*np.pi/180)
    robot.plot_robot()
    
    ## Plot limited workspace:
    #min_angle = np.array([-90, -45, -150, -90, -90, -90])*np.pi/180
    #max_angle = np.array([90, 135, 30, 90, 90, 90])*np.pi/180
    #q12min = 65; 
    #q12max = 180; 
    #dots = []
    #angle = []
    #for q1 in np.linspace(min_angle[1], max_angle[1], 200):
    #    for q2 in np.linspace(min_angle[2] , max_angle[2], 200):
    #        if q1-q2 > q12min or q1-q2 < q12max:
    #            T = robot.forward_kinematics(np.array([0,q1,q2,0,0,0]))
    #            angle.append(q1-q2)
    #            dots.append(T[:3,3])
    
    #for d, a in zip(dots, angle):
    #    plt.plot(d[0] , d[2], 'o', color= [np.abs(a/(2*np.pi)),0,0])
    #plt.show()


import sympy as sp

# Define joint angles as symbolic variables
theta1, theta2, theta3, theta4, theta5, theta6 = sp.symbols('theta1 theta2 theta3 theta4 theta5 theta6')

def dh_transformation_matrix(theta, d, a, alpha):
    """
    Calculate the DH transformation matrix using symbolic mathematics.

    Parameters:
        theta: Angle around the z-axis (in radians)
        d: Distance along the z-axis
        a: Distance along the x-axis
        alpha: Angle around the x-axis (in radians)

    Returns:
        A 4x4 transformation matrix
    """
    return sp.Matrix([
        [sp.cos(theta), -sp.sin(theta) * sp.cos(alpha), sp.sin(theta) * sp.sin(alpha), a * sp.cos(theta)],
        [sp.sin(theta), sp.cos(theta) * sp.cos(alpha), -sp.cos(theta) * sp.sin(alpha), a * sp.sin(theta)],
        [0, sp.sin(alpha), sp.cos(alpha), d],
        [0, 0, 0, 1]
    ])

# Example usage with DH parameters
L = {
    'world': {'l': 45},
    'base': {'l': 45},
    'lower_arm': {'l': 95},
    'parallel_arm': {'l': 120, 's1': 30, 's2': 20},
    'elbow': {'l': 18},
    'upper_arm': {'l': 157},
    'wrist': {'l': 75}
}

# DH parameters for each joint with symbolic values for theta
dh_params = [
    {'theta': theta1, 'd': L['world']['l'], 'a': 0, 'alpha': 0},
    {'theta': theta2 - sp.pi / 2, 'd': 0, 'a': L['base']['l'], 'alpha': -sp.pi / 2},
    {'theta': theta3, 'd': 0, 'a': L['lower_arm']['l'], 'alpha': 0},
    {'theta': theta4, 'd': 0, 'a': L['elbow']['l'], 'alpha': -sp.pi / 2},
    {'theta': theta5, 'd': 0, 'a': L['upper_arm']['l'], 'alpha': sp.pi / 2},
    {'theta': theta6, 'd': L['wrist']['l'], 'a': 0, 'alpha': -sp.pi / 2}
]

# The overall transformation matrix
T = sp.eye(4)
for params in dh_params:
    T = T * dh_transformation_matrix(**params)

print("Overall Transformation Matrix (Base to End-Effector) with symbolic mathematics:")
# Simplify the matrix for better readability
T_simplified = sp.simplify(T)

print("Simplified Overall Transformation Matrix (Base to End-Effector):")
sp.pprint(T_simplified, num_columns = 250, wrap_line = False)
print(T_dumb)

