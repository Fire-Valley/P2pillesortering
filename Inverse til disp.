import numpy as np
from Inverse_zero_position import theta1_deg, theta2_deg

# Define the lengths of the robot arm segments
L = {
    'world': {'l': 90},
    'base': {'l': 45},
    'lower_arm': {'l': 95},
    'parallel_arm': {'l': 120, 's1': 30, 's2': 20},
    'elbow': {'l': 18},
    'upper_arm': {'l': 175},
    'wrist': {'l': 70}
}

def geometric_inverse_kinematic_for_disp1_ud(desired_position, L):
    x, y, z = desired_position

    # Calculate theta1
    theta1_rad = np.arctan2(y, x)
    theta1_deg = np.degrees(theta1_rad)

    # Links
    L1E = L['lower_arm']['l'] + L['elbow']['l']
    L2W = L['upper_arm']['l'] + L['wrist']['l']

    NewL = np.sqrt(y ** 2 + z ** 2)
    L3 = np.sqrt(L1E ** 2 - 50 ** 2)

    theta2_rad1 = np.arccos((L3 ** 2 + NewL ** 2 - L2W ** 2) / (2 * NewL * L3))
    theta2_rad2 = np.cos(y / NewL)
    theta2_rad = theta2_rad1 + theta2_rad2
    theta2_deg = 180 - (np.degrees(theta2_rad))

    theta3_rad = np.arccos((L2W ** 2 + L3 ** 2 - NewL ** 2) / (2 * L2W * L3))
    theta3_deg = np.degrees(theta3_rad)
    theta3_deg += theta2_deg

    theta4_deg = 180
    theta5_deg = 80
    theta6_deg = 70

    return theta1_deg, theta2_deg, theta3_deg, theta4_deg, theta5_deg, theta6_deg

def geometric_inverse_kinematic_for_disp1_ind(desired_position, L):
    x, y, z = desired_position

    theta1_rad = np.arctan2(y, x)
    theta1_deg = np.degrees(theta1_rad)

    # Links
    L1E = L['lower_arm']['l'] + L['elbow']['l']
    L2W = L['upper_arm']['l'] + L['wrist']['l']

    NewL = np.sqrt(y**2 + z**2)
    L3 = np.sqrt(L1E**2+130**2)

    theta2_rad1 = np.arccos((L3**2 + NewL**2 - L2W**2) / (2 * NewL * L3))
    theta2_rad2 = np.cos(y/NewL)
    theta2_rad = theta2_rad1+theta2_rad2
    theta2_deg = 180 - (np.degrees(theta2_rad))

    theta3_rad = np.arccos((L2W**2 + L3**2 - NewL**2) / (2 * L2W * L3))
    theta3_deg = np.degrees(theta3_rad)
    theta3_deg += theta2_deg

    theta4_deg = 180
    theta5_deg = 80
    theta6_deg = 70

    return theta1_deg, theta2_deg, theta3_deg, theta4_deg, theta5_deg, theta6_deg



# Define the desired positions
desired_position_ud = (105, 200, 80)
desired_position_ind = (105, 250, 80)

# Call the functions and store the results
theta_values_ud = geometric_inverse_kinematic_for_disp1_ud(desired_position_ud, L)
theta_values_ind = geometric_inverse_kinematic_for_disp1_ind(desired_position_ind, L)

angles_clamped = [max(0, min(180, theta2_deg)) for theta2_deg in theta_values_ud]
angles_clamped = [max(0, min(180, theta2_deg)) for theta2_deg in theta_values_ind]

# Print for disp1_ud
print("\nTheta values for disp1_ud:")
print("Theta1 in Degrees:", theta_values_ud[0])
print("Theta2 in Degrees:", theta_values_ud[1])
print("Theta3 in Degrees:", theta_values_ud[2])
print("Theta4 in Degrees:", theta_values_ud[3])
print("Theta5 in Degrees:", theta_values_ud[4])
print("Theta6 in Degrees:", theta_values_ud[5])

# Print for disp1_ind
print("\nTheta values for disp1_ind:")
print("Theta1 in Degrees:", theta_values_ind[0])
print("Theta2 in Degrees:", theta_values_ind[1])
print("Theta3 in Degrees:", theta_values_ind[2])
print("Theta4 in Degrees:", theta_values_ind[3])
print("Theta5 in Degrees:", theta_values_ind[4])
print("Theta6 in Degrees:", theta_values_ind[5])
