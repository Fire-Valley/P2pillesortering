import numpy as np


def r2_score_3d(actual_points, predicted_points):
    actual = np.array(actual_points)
    predicted = np.array(predicted_points)

    if actual.shape != predicted.shape:
        raise ValueError("Input arrays must have the same shape")

    # SSR: sum of squared residuals
    residuals = actual - predicted
    ssr = np.sum(np.sum(residuals ** 2, axis=1))  # sum of squared Euclidean distances

    # SST: total sum of squares from mean
    mean_actual = np.mean(actual, axis=0)
    deviations = actual - mean_actual
    sst = np.sum(np.sum(deviations ** 2, axis=1))

    r2 = 1 - ssr / sst if sst != 0 else float('nan')
    return r2


# --- Placeholder data ---
# Faktiske (målte) punkter
actual_points = [
    [1.0, 2.0, 3.0, 1.0, 1.0, 1.0],
    [2.0, 3.0, 4.0, 1.0, 1.0, 1.0],
    [3.0, 4.0, 5.0, 1.0, 1.0, 1.0],
    [4.0, 5.0, 6.0, 1.0, 1.0, 1.0],
    [5.0, 6.0, 7.0, 1.0, 1.0, 1.0]
]

# Beregnede (forudsagte) punkter
predicted_points = [
    [1.0, 2.0, 3.0, 1.0, 1.0, 1.0],
    [2.0, 3.0, 4.0, 1.0, 1.0, 1.0],
    [3.0, 4.0, 5.0, 1.0, 1.0, 1.0],
    [4.0, 5.0, 6.0, 1.0, 1.0, 1.0],
    [5.0, 6.0, 7.0, 1.0, 1.0, 2.0]
]

# Beregn forklaringsgraden
r2 = r2_score_3d(actual_points, predicted_points)
print(f"R² = {r2:.4f}")
